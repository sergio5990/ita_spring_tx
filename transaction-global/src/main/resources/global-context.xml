<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="by.academy.it.global"/>
    <bean id="dataSourceA" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="XADBMSA"/>
        <property name="xaDataSourceClassName"
                  value="com.mysql.cj.jdbc.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="databaseName">globalA?createDatabaseIfNotExist=true</prop>
                <prop key="user">root</prop>
                <prop key="password">rootroot</prop>
            </props>
        </property>
        <property name="poolSize" value="5"/>
    </bean>
    <bean id="dataSourceB" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="XADBMSB"/>
        <property name="xaDataSourceClassName"
                  value="com.mysql.cj.jdbc.MysqlXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="databaseName">globalB?createDatabaseIfNotExist=true</prop>
                <prop key="user">root</prop>
                <prop key="password">rootroot</prop>
            </props>
        </property>
        <property name="poolSize" value="5"/>
    </bean>
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" abstract="true">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>

        <property name="packagesToScan" value="by.academy.it.global.entity"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.transaction.jta.platform">by.academy.it.global.platform.AtomikosJtaPlatform</prop>
                <prop key="javax.persistence.transactionType">JTA</prop>
                <prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL55Dialect</prop>
                <prop key="hibernate.max_fetch_depth">3</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
            </props>
        </property>
    </bean>

    <bean id="emfA" parent="entityManagerFactory">
        <property name="dataSource" ref="dataSourceA"/>
        <property name="persistenceUnitName" value="unit-emfA"/>
    </bean>
    <bean id="emfB" parent="entityManagerFactory">
        <property name="dataSource" ref="dataSourceB"/>
        <property name="persistenceUnitName" value="unit-emfB"/>
    </bean>
    <bean id="atomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown" value="true"/>
    </bean>
    <bean id="atomikosUserTransaction"
          class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300"/>
    </bean>
    <bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
    </bean>
    <tx:annotation-driven transaction-manager="txManager"/>
</beans>